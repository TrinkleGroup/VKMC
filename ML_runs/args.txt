usage: GCNetRun.py [-h] [-DF F] [-cr Crys] [-m M] [-rl RL] [-rlavg] [-nl L]
                   [-nch Ch] [-cngb NN] [-rn] [-sn] [-scr] [-td T] [-tn T]
                   [-sep Ep] [-eep Ep] [-sp s1s2s3] [-vSp SpV] [-aj] [-ajn]
                   [-nt NTRAIN] [-i I] [-lr LR] [-bs BS] [-wm WM] [-ws WS]
                   [-lw]

Input parameters for using GCnets

optional arguments:
  -h, --help            show this help message and exit
  -DF F, --FileName F   Data file name at specified DataPath. (default: None)
  -cr Crys, --Crys Crys
                        Type of crystal to read crystal data of. (default:
                        None)
  -m M, --Mode M        Running mode (train, eval, getY, getRep if getRep,
                        then layer must specified with -RepLayer. (default:
                        None)
  -rl RL, --RepLayer RL
                        Layer to extract representation from (count starts
                        from 0) (default: None)
  -rlavg, --RepLayerAvg
                        Whether to average Representation for all samples
                        (default: False)
  -nl L, --Nlayers L    No. of layers of the neural network. (default: None)
  -nch Ch, --Nchannels Ch
                        No. of representation channels in non-input layers.
                        (default: None)
  -cngb NN, --ConvNgbRange NN
                        Nearest neighbor range of convolutional filters.
                        (default: 1)
  -rn, --Residual       Whether to do residual training. (default: False)
  -sn, --SubNet         Whether to train pairwise subnetworks. (default:
                        False)
  -scr, --Scratch       Whether to create new network and start from scratch
                        (default: False)
  -td T, --Tdata T      Temperature to read data from (default: None)
  -tn T, --TNet T       Temperature to use networks from For example one can
                        evaluate a network trained on 1073 K data, on the 1173
                        K data, to see what it does. (default: None)
  -sep Ep, --Start_epoch Ep
                        Starting epoch (for training, this network will be
                        read in.) (default: None)
  -eep Ep, --End_epoch Ep
                        Ending epoch (for training, this will be the last
                        epoch.) (default: None)
  -sp s1s2s3, --SpecTrain s1s2s3
                        species to consider, order independent (Eg, 123 or 213
                        etc for species 1, 2 and 3 (default: None)
  -vSp SpV, --VacSpec SpV
                        species index of vacancy, must match dataset, default
                        0 (default: 0)
  -aj, --AllJumps       Whether to train on all jumps, or single selected
                        jumps out of a state. (default: False)
  -ajn, --AllJumpsNetType
                        Whether to use network trained on all jumps, or single
                        selected jumps out of a state. (default: False)
  -nt NTRAIN, --Ntrain NTRAIN
                        No. of training samples. (default: 10000)
  -i I, -Interval I     Epoch intervals in which to save or load networks.
                        (default: 1)
  -lr LR, -Learning_rate LR
                        Learning rate for Adam algorithm. (default: 0.001)
  -bs BS, -Batch_size BS
                        size of a single batch of samples. (default: 128)
  -wm WM, -Mean_wt WM   Initialization mean value of weights. (default: 0.02)
  -ws WS, -Std_wt WS    Initialization standard dev of weights. (default: 0.2)
  -lw, -Learn_weights   Whether to learn reweighting of samples. (default:
                        False)
